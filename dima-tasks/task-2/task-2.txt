	ЗАДАНИЕ 2
	(Сервер и все, все, все!!!)
	
	
2.a (log in)
	- (1) Взять имя любого уже зарегестрированного пользователя и создать объект
	запроса на логин для этого пользователя. В дальнейшем этот объект "пойдёт"
	к серверу, и сервер будет обрабатывать его. Для этого:
		- создать объект класса UserAccount с "пустым" именем, то есть такой
		"пустой аккаунт";
		- посмотреть на класс UserRequest и понять какие данные нужны для
		создания его объекта;
		- создать объект класса UserRequest, передав пустой аккаунт и имя
		пользователя, который логинится, в качестве параметра data. Это будет
		объект запроса на логин.
		
		Для обозначения того, для чего предназначен тот или иной запрос,
		существуют константы в файле core.py. Константы, которые начинаются на
		UR, относятся к запросам пользователей серверу (User Request). Эти
		константы передаются в качестве типа запроса при создании объекта
		запроса. А константы, которые начинаются на SR, относятся к ответам
		сервера пользователям (Server Response). Они, соответственно, передаются
		как тип ответа сервера при создании объекта ServerResponse. Сервер и
		клиентская сторона используют эти константы чтобы понять с чем связан
		тот или иной запрос или ответ.
		
		ПРИМЕЧАНИЕ
		По поводу пустого аккаунта. При создании объекта UserRequest необходимо
		передать аккаунт в качестве requester_account, то есть аккаунт того, кто
		делает запрос. Казалось бы, при логине нужно передавать аккаунт с именем
		пользователя, который логинится.
		Но, если рассуждать без привязки к коду, просто логически, то такие
		операции как логин и регистрация пользователя относятся к "особым"
		операциям, которые происходят как-бы при ещё не зашедшем на сервер
		пользователе. Например, при пересылке сообщения между пользователями
		сервер получает соответствующий запрос, смотрит на requester_account и
		понимает от кого пришёл запрос. А при логине запрос приходит как-бы
		не от кого, пользователь только-только собирается войти. Поэтому здесь
		используется пустой аккаунт.
		Вообще, это один из фундаментальных моментов. Так что стоит его
		пересмотреть, потому что, на самом деле, использование пустого аккаунта
		совсем не очевидно в коде, это просто необходимо помнить - и поэтому это
		плохо.
		
	- (2) Положить этот объект запроса в диспетчер.
	Здесь хронология событий немного нарушается, потому что чтобы положить
	что-то в диспетчер, нужно сначала создать его объект. Таким образом, здесь
	нужно:
		- посмотреть на класс Dispatcher, понять как создать его объект и какие
		есть методы. В частности, как добавить/положить запрос в диспетчер;
		- создать объект диспетчера;
		- положить запрос на логин в диспетчер;
		
	- (3) Получить ответ от сервера.
	Итак, запрос оказался в диспетчере. В какой-то момент сервер сам возьмёт его
	на обработку и положит свой ответ также в диспетчер. Осталось только взять
	этот ответ (response).
		- опять же, сначала сервер нужно создать и запустить. Как это сделать?
		Здесь сразу скажу, что в конце всего кода сервер нужно остановить,
		иначе выполнение программы продолжится и ничего не будет происходить -
		просто сервер будет сообщать, что нет запросов.
		- у диспетчера есть метод позволяющий получить ответ сервера по
		аккаунту - это метод get_server_response. Нужно передать ему пустой
		аккаунт. Вызови get_server_response чтобы получить response.
		- диспетчер может не иметь ни одного серверного ответа для данного
		аккаунта. Если это так, то get_server_response просто завершится с
		ошибкой. Но есть возможность проверить наличие response'а с помощью
		метода has_server_response. Теперь ясно, что перед получением response'а
		нужно проверить а есть ли он вообще у диспетчера в данный момент.
		- но одной попытки получить ответ от сервера недостаточно. Дело в том,
		что сервер запущен в своём собственном "потоке исполнения", а у кода
		в файле task_2.py поток свой. На момент проверки наличия response'а в
		диспетчере сервер может ещё не успеть обработать запрос и положить этот
		response в диспетчер. Поэтому нужно именно ждать ответа от сервера. А
		именно, проверять наличие ответа пока он там наконец не окажется. Благо
		мы точно уверены, что он там будет - ведь мы же и инициировали его
		появление.
		
		Итак, как ждать ответа от сервера? От подсказок пока воздержусь.
		
	- (4) Отреагировать на ответ сервера разумным образом. Например, распечатать
	соответствующее сообщение на экране.
	Итак, response от сервера получен. Вообще, на запрос о логине сервер может
	ответить по-разному в зависимости от корректности этого запроса. Например,
	если данный пользователь уже вошёл ранее (и ещё не вышел), то сервер вернёт
	соответствующий ответ. Как же узнать что ответил сервер? Ответ на этот
	вопрос нужно искать в самом объекте response'а, который принадлежит к классу
	ServerResponse. Среди прочего этот объект содержит атрибут о типе respons'a,
	значение которого равно одной из констант из core.py, которые начинаются с
	SR. А так как в этом пункте 2.a мы отправляем запрос на логин, то ответ
	сервера будет содержать одно из значений констант, начинающихся с SR_LOGIN.
	
	Вообщем, в этом подпункте нужно проверить все возможные ответы сервера, и в
	каждом случае вывести понятное сообщение. Замечу, что в одном из вариантов,
	а именно в случае абсолютно корректного и успешного запроса на логин, сервер
	спросит пароль, что инициирует ещё один виток общения с ним: снова нужно
	будет формировать запрос, ложить его в диспетчер и ждать ответа от сервера.
		

2.b (log out)
	- Создать объект диспетчера и объект сервера;
	- Запустить сервер. А в самом конце не забыть остановить его;
	- Выбрать имя зарегестрированного пользователя и залогиниться под ним;
	- Пользователь вошёл. Теперь будем выходить, то есть делать logout. Для
	этого:
		- создать объект класса UserAccount, передав ему имя пользователя;
		- создать объект класса UserRequest на логаут, передав ему аккаунт;
		- положить запрос на логаут в диспетчер;
		- получить ответ от сервера;
		- обработать (handle) ответ сервера разумным образом. Например, вывести
		сообщение о том, что выход прошёл успешно или что-то было не так.

